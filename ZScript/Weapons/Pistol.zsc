//Vengeance Strike Sidearm

Class PistolIsEmpty : MO_ZSToken{}

Class NeverUsedPistol : MO_ZSToken{}

class MO_VengeanceStriker : JMWeapon// replaces Pistol
{
	int burstcounter;
	const MaxBurst = 3;
 	Default
	{
		Weapon.AmmoUse 0;
		Weapon.AmmoGive 20;
		Weapon.AmmoType1 "MO_LowCaliber";
		Weapon.AmmoType2 "PistolMagAmmo";
		Obituary "$OBMO_VENPISTOL";
		+WEAPON.WIMPY_WEAPON;
		Inventory.Pickupmessage "$GOTENFPISTOL";
		Tag "$TAG_VENPISTOL";
		Scale .55;
		Inventory.PickupSound "weapons/pistol/pickup";
		Inventory.ForbiddenTo "MO_SergeantPlayer";
		Inventory.RestrictedTo "MO_OfficerPlayer";
		+WEAPON.NOALERT;
		JMWeapon.InspectToken "NeverUsedPistol";
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_GiveInventory("NeverUsedPistol",1);
		burstcounter = 0;
	}

	action void MO_ResetBurstCount()
	{
		invoker.burstcounter = 0;
	}

	action bool MO_IsMaxBurstCount()
	{
		return invoker.burstcounter >= MaxBurst;
	}

	action void MO_CountBurst()
	{
		invoker.burstcounter++;
	}

	States
	{
	ContinueSelect:
		TNT1 AAAAAAAAAAAAAAAAAA 0 A_Raise();
		TNT1 A 0 MO_ResetBurstCount;
		Goto Ready;
	Ready:
		PS1K ABCDEF 0; //Load kick sprites
		TNT1 A 0 JM_CheckInspectIfDone;
	SelectAnimation:
		TNT1 A 0 A_StartSound("weapons/pistol/draw",1);
		PSTD ABC 1;
	ReadyToFire:
		PSTD D 0 A_JumpIfInventory("PistolMagAmmo",1,2);
		PSTF E 0;
		#### # 1 
		{
			if(CountInv("PistolMagAmmo") == 0 && CountInv("MO_LowCaliber") > 1)
			{return ResolveState("REload");}
			return JM_WeaponReady(WRF_ALLOWRELOAD);
		}
		Loop;
	Inspect:
			TNT1 A 6;
			TNT1 A 0 A_StartSound("pistol/inspect",0);
			PS1I ABCDEFGHIIJJJJJJ 1 JM_WeaponReady();
			TNT1 A 0 A_StartSound("weapons/pistol/magout",0);
			PS1I KMNPRSTVW 1 JM_WeaponReady();
			PS1I WWWWW 3 JM_WeaponReady();
			PS1I XXYZ 1 JM_WeaponReady();
			2S1I ABCD 1;
			PSTG A 0 A_StartSound("weapons/pistol/magin",0);
			2S1I DEEFG 1;
			PSTG A 0 A_StartSound("weapons/pistol/magclick",0);
			2S1I HIJKLLL 1 JM_WeaponReady();
			PSTG A 0 A_StartSound("Weapons/pistol/silencerfoley",7);
			2S1I MNOP 1 JM_WeaponReady();
			PSTG A 0 A_StartSound("Weapons/pistol/chamberback",0);
			2S1I QRSTTUU 1 JM_WeaponReady();
			2S1I UUUUUUUUUUU 1;
			2S1I V 1 A_StartSound("Weapons/pistol/chamberforward",0);
			2S1I WXY 1 JM_WeaponReady();
			2S1I Z 5 JM_WeaponReady();
			PS1I F 1  A_StartSound("pistol/reloadend",0);
			PSR1 EDCBA 1 JM_WeaponReady();
			Goto ReadyToFire;
	Deselect:
		PSTD CBA 1;
		PSTG A 0 A_Lower(12);
		Wait;
	Select:
		PSTG A 0;
		Goto ClearAudioAndResetOverlays;
	Fire:
		PSTG A 0 MO_CheckMag;	
		PSTF A 1 {
			A_FireBullets (5.6, 0, 1, 12, "UpdatedBulletPuff", FBF_NORANDOM,0,"MO_BulletTracer", 0);
			A_StartSound("weapons/pistol/fire", CHAN_WEAPON);
			A_AlertMonsters();
			A_GunFlash();
			A_TakeInventory("PistolMagAmmo",1,TIF_NOTAKEINFINITE);
			JM_CheckForQuadDamage();
			}
		PSTG A 0 {MO_EjectCasing("PistolCasing", false, speed: frandom(4, 7), offset: (26, 0, -7));}
		PSTF B 1 JM_GunRecoil(-0.3, .06);
		PSTF C 1 JM_GunRecoil(+0.125, .01);
		PSTG A 0 MO_CheckMag;
		PSTF D 1;
		PSTD D 0;
 		"####" "########" 1 {
				If(JustPressed(BT_ATTACK))
				{return ResolveState("Fire");}
				return JM_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD);
			}
		Goto ReadyToFire;
	AltFire:
		PSTG A 0 MO_CheckMag;
		PSTF A 1 {
			A_FireBullets (5.6, 0, 1, 12, "UpdatedBulletPuff", FBF_NORANDOM,0,"MO_BulletTracer", 0);
			A_StartSound("weapons/pistol/fire", CHAN_WEAPON);
			A_AlertMonsters();
			A_GunFlash("Flash");
			A_TakeInventory("PistolMagAmmo",1,TIF_NOTAKEINFINITE);
			JM_CheckForQuadDamage();
			MO_CountBurst();
			}
		PSTG A 0 {MO_EjectCasing("PistolCasing", false, speed: frandom(4, 7), offset: (26, 0, -7));}
		PSTF A 0 A_JumpIf(MO_IsMaxBurstCount(), "BurstFinished");
		PSTF C 1 JM_GunRecoil(-0.45, .06);		
		Goto AltFire;
	
	BurstFinished:
		TNT1 A 0 MO_ResetBurstCount;
		PSTF B 1 JM_GunRecoil(-0.45, .06);
		PSTF C 1 JM_GunRecoil(+0.2, .01);
		PSTG A 0 MO_CheckMag;
		PSTF D 1;
	BurstFinishedLoop:
		PSTD D 1 JM_WeaponReady(WRF_NOFIRE);
		PSTG A 0 A_ReFire("BurstFinishedLoop");
		Goto ReadyToFire;

	Reload:
		PSTG A 0 
		{
			MO_ResetBurstCount();
			if(CountInv("PistolMagAmmo") >=17) {return ResolveState("ReadyToFire");}
			if(CountInv("MO_LowCaliber") < 1) {return ResolveState("ReadyToFire");}
			if(CountInv("PistolMagAmmo") > 1 && CountInv("PistolMagAmmo") <= 17)
			{return ResolveState("TacticalReload");}
			return ResolveState(null);
		}
		PSTG A 0 A_StartSound("pistol/reloadlift",CHAN_AUTO);
		PSR2 A 0;
		PSR1 A 0
		{
			if(CountInv("PistolMagAmmo") < 1)
			{
				A_GiveInventory("PistolIsEmpty",1);
				JM_SetWeaponSprite("PSR2");
			}
		}
		#### ABC 1 JM_WeaponReady(WRF_NOFIRE);
		#### A 0 A_JumpIfInventory("MO_PowerSpeed",1,1);
		#### DEF 1 JM_WeaponReady(WRF_NOFIRE);
		#### A 0 A_StartSound("weapons/pistol/magout",CHAN_AUTO);
		#### A 0 A_JumpIfInventory("MO_PowerSpeed",1,2);
		#### GH 1 JM_WeaponReady(WRF_NOFIRE);
		#### H 9
		{
			JM_WeaponReady(WRF_NOFIRE);
			if(invoker.OwnerHasSpeed()) {A_SetTics(6);}
		}
		#### IJ 2
		{
			JM_WeaponReady(WRF_NOFIRE);
			if(invoker.OwnerHasSpeed()) {A_SetTics(1);}
		}
		#### K 1 JM_WeaponReady(WRF_NOFIRE);
		#### A 0 A_StartSound("weapons/pistol/magin",CHAN_AUTO);
		#### A 0 A_JumpIf(invoker.OwnerHasSpeed(),1);
		#### KLMMN 1 JM_WeaponReady(WRF_NOFIRE);
		#### A 0 A_StartSound("weapons/pistol/magclick",CHAN_7);
		#### A 0 A_JumpIf(invoker.OwnerHasSpeed(),3);
		#### OO 1 JM_WeaponReady(WRF_NOFIRE);
		#### AA 0;
		#### A 0 A_JumpIfInventory("PistolIsEmpty",1,"ChamberReload");
		#### A 0 JM_ReloadGun("PistolMagAmmo", "MO_LowCaliber",18,1);
		#### PPQR 1 JM_WeaponReady(WRF_NOFIRE);
	DoneReload:
	//	Goto ReloadLoop;
		#### A 0 A_StartSound("pistol/reloadendfast",CHAN_AUTO);
		#### A 0 A_JumpIf(invoker.OwnerHasSpeed(),1);
		#### STUV 1 JM_WeaponReady(WRF_NOFIRE);
		TNT1 A 0;
		Goto ReadyToFire;
	ChamberReload:
		#### A 0 A_SetInventory("PistolIsEmpty",0);
		#### A 0 JM_ReloadGun("PistolMagAmmo", "MO_LowCaliber",17,1);
		#### A 0 A_JumpIf(invoker.OwnerHasSpeed(),1);
		PSR2 PP 1;
		PSR2 Q 3
		{
			if(invoker.OwnerHasSpeed()) {A_SetTics(2);}
		}
		#### A 0 A_JumpIf(invoker.OwnerHasSpeed(), 1);
		PSR2 RR 1;
		#### A 0 A_StartSound("weapons/pistol/chamberforward",CHAN_AUTO);
		#### A 0 A_JumpIfInventory("MO_PowerSpeed",1,1);
		PSR2 S 1;
		#### A 0 A_JumpIfInventory("MO_PowerSpeed",1,2);
		PSR2 TTTUU 1;
		#### A 0 A_StartSound("pistol/reloadendfast",CHAN_AUTO);
		PSR2 UUVW 1;
		PSR2 XY 1;
		PSR2 Z 1;
		Goto ReadyToFire;

	TacticalReload:
		PSTG A 0 A_StartSound("pistol/reloadlift",CHAN_AUTO);
		PSR3 A 1 JM_WeaponReady(WRF_NOFIRE);
		#### A 0 A_JumpIf(invoker.OwnerHasSpeed(),1);
		PSR3 BC 1 JM_WeaponReady(WRF_NOFIRE);
		#### A 0 A_JumpIf(invoker.OwnerHasSpeed(),1);
		PSR3 DEF 1 JM_WeaponReady(WRF_NOFIRE);
		PSR3 G 4
		{
			JM_WeaponReady(WRF_NOFIRE);
			if(CountInv("MO_PowerSpeed") == 1) {A_SetTics(2);}
		}
		#### A 0 A_JumpIf(invoker.OwnerHasSpeed(),1);
		PSR3 HI 1 JM_WeaponReady(wrf_nofire);
		PSTG A 0 A_StartSound("weapons/pistol/magout",CHAN_AUTO);
		PSTG A 0 A_JumpIf(invoker.OwnerHasSpeed(),1);
		PSR3 JK 1 JM_WeaponReady(WRF_NOFIRE);
		PSTG A 0 A_JumpIf(invoker.OwnerHasSpeed(),2);
		PSR3 LMNO 1 JM_WeaponReady(WRF_NOFIRE);
		PSTG A 0 A_JumpIf(invoker.OwnerHasSpeed(),2);
		PSR3 PQ 1 JM_WeaponReady(WRF_NOFIRE);
		PSTG A 0 A_JumpIf(invoker.OwnerHasSpeed(),2);
		PSR3 RRR 1 JM_WeaponReady(WRF_NOFIRE);
		PSTG AA 0;
		PSR3 SS 1 JM_WeaponReady(WRF_NOFIRE);
		PSTG A 0 A_StartSound("weapons/pistol/magin",CHAN_AUTO);
		PSR3 A 0 A_JumpIf(invoker.OwnerHasSpeed(), 2);
		PSR3 TUUVW 1 JM_WeaponReady(WRF_NOFIRE);
		PSTG A 0 A_StartSound("weapons/pistol/magclick",CHAN_7);
		PSR3 A 0 JM_ReloadGun("PistolMagAmmo", "MO_LowCaliber",18,1);
		PSR3 A 0 A_JumpIf(invoker.OwnerHasSpeed(), 2);
		PSR3 XYZ 1 JM_WeaponReady(WRF_NOFIRE);
		PSTG A 0 A_StartSound("pistol/reloadend",CHAN_AUTO);
		PSR3 A 0 A_JumpIf(invoker.OwnerHasSpeed(), 2);
		PSR3 Z 1 JM_WeaponReady(WRF_NOFIRE);
		PSR4 AA 1 JM_WeaponReady(WRF_NOFIRE);
		PSR3 A 0 A_JumpIf(invoker.OwnerHasSpeed(), 1);
		PSR4 BCD 1 JM_WeaponReady(WRF_NOFIRE);
		PSR3 A 0 A_JumpIf(invoker.OwnerHasSpeed(), 2);
		PSR4 EFG 1 JM_WeaponReady(WRF_NOFIRE);
		PSR3 A 0 A_JumpIf(invoker.OwnerHasSpeed(), 1);
		PSR4 HJK 1 JM_WeaponReady(WRF_NOFIRE);
		Goto ReadyToFire;
	Flash:
		PSTF Z 1 A_AttachLightDef('GunLighting', 'GunFireLight');
		TNT1 A 2 Bright A_RemoveLight('GunLighting');
		Goto LightDone;

 	Spawn:
		PISN A -1;
		Stop;
	FlashKick:
		PSTK A 0
		{
			if(CountInv("PistolMagAmmo") < 1) {JM_SetWeaponSprite("PS1K");}
			If(invoker.OwnerHasSpeed()) {return ResolveState("FlashKickFast");}
			return ResolveState(null);
		}
		"####" ABCDE 1;
		"####" F 6;
		"####" EDCBA 1;
		Goto ReadyToFire;
	FlashKickFast:
		"####" A 0;// A_JumpIf(CountInv("PistolMagAmmo") < 1,"FlashKickFastEmpty");
		"####" ABCDE 1;
		"####" FF 1;
		"####" FEDCBA 1;
		Goto ReadyToFire;
	FlashAirKick:
		PSTK A 0
		{
			if(CountInv("PistolMagAmmo") < 1) {JM_SetWeaponSprite("PS1K");}
			If(invoker.OwnerHasSpeed()) {return ResolveState("FlashAirKickFast");}
			return ResolveState(null);
		}
		#### ABCDEF 1;
		#### F 6;
		#### EDCBA 1;
		Goto ReadyToFire;
	FlashAirKickFast:
		#### ABCDEF 1;
		#### FFFF 1;
		#### FEDCBA 1;
		Goto ReadyToFire;
	}
}

class PistolMagAmmo : Ammo
{
	Default
	{
		Inventory.Amount 0;
		Inventory.MaxAmount 18;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 18;
		Inventory.Icon "PISNB0";
		+INVENTORY.IGNORESKILL;
	}
}